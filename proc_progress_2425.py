# -*- coding: utf-8 -*-
"""Proc Progress_2425.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wb9r9VHHGtIusRoEstTKToOepvaU8z-s
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import streamlit as st
# Example: Upload file in Streamlit
uploaded_file = st.file_uploader("Upload your Excel file", type=['xlsx'])
if uploaded_file is not None:
    df = pd.read_excel(uploaded_file)

from google.colab import files
import io

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))
  # Read the Excel file into a pandas DataFrame
  df = pd.read_excel(io.BytesIO(uploaded[fn]))

# Display the first few rows of the DataFrame
display(df.head())



# Calculate summaries
total_firms = df['Contractor/ Firm'].nunique()
total_amount_allocated = df['PO Amount (PKR)'].sum()
total_items_demanded = df['Items Demanded'].sum()
total_quantity_demanded = df['Quantity Demanded'].sum()
total_items_delivered = df['Items Delivered'].sum()
total_quantities_delivered = df['Quantity Delivered'].sum()
total_bal_items = total_items_demanded - total_items_delivered
total_bal_quantities = total_quantity_demanded - total_quantities_delivered

# Create a DataFrame for the summary table
summary_data = {
    'Metric': [
        'Total Firms Participated',
        'Total Amount Allocated (PKR)',
        'Total Items Demanded',
        'Total Quantity Demanded',
        'Total Items Delivered',
        'Total Quantities Delivered',
        'Total Bal Items',
        'Total Bal Quantities'
    ],
    'Value': [
        total_firms,
        total_amount_allocated,
        total_items_demanded,
        total_quantity_demanded,
        total_items_delivered,
        total_quantities_delivered,
        total_bal_items,
        total_bal_quantities
    ]
}

summary_df = pd.DataFrame(summary_data)

# Display the summary table
display(summary_df)

"""# Task
Rank firms based on minimum balance quantity, minimum rejection events, and minimum days for completion of order, giving equal weightage to each factor, and display the ranking as a serialed list in descending order.

## Calculate metrics per firm

### Subtask:
Calculate the total balance quantity, total rejection events, and average days for completion of order for each firm.

**Reasoning**:
Calculate the balance quantity for each PO, then group by firm to get the sum of balance quantity, sum of rejection events, and average days for completion.
"""

df['Balance Quantity'] = df['Quantity Demanded'] - df['Quantity Delivered']

firm_performance = df.groupby('Contractor/ Firm').agg(
    Total_Balance_Quantity=('Balance Quantity', 'sum'),
    Total_Rejection_Events=('Number of Rejection Events', 'sum'),
    Average_Days_for_Completion=('Number of Days for Completion of Order', 'mean')
).reset_index()

display(firm_performance.head())

"""## Normalize the metrics

### Subtask:
Scale the calculated metrics so they can be compared and combined with equal weightage.

**Reasoning**:
Scale the relevant columns in `firm_performance` using MinMaxScaler to prepare for ranking.
"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

firm_performance[['Normalized_Balance_Quantity', 'Normalized_Rejection_Events', 'Normalized_Days_for_Completion']] = scaler.fit_transform(
    firm_performance[['Total_Balance_Quantity', 'Total_Rejection_Events', 'Average_Days_for_Completion']]
)

display(firm_performance.head())

"""## Calculate a combined score

### Subtask:
Combine the normalized metrics to create a single ranking score for each firm.

**Reasoning**:
Combine the normalized metrics to create a single ranking score for each firm, where a higher score indicates better performance.
"""

firm_performance['Ranking_Score'] = (1 - firm_performance['Normalized_Balance_Quantity']) + \
                                    (1 - firm_performance['Normalized_Rejection_Events']) + \
                                    (1 - firm_performance['Normalized_Days_for_Completion'])

display(firm_performance.head())

"""## Rank the firms

### Subtask:
Rank the firms based on the combined score in descending order.

**Reasoning**:
Sort the DataFrame by the ranking score in descending order and reset the index to create a new serial number.
"""

firm_ranking = firm_performance.sort_values(by='Ranking_Score', ascending=False).reset_index(drop=True)
firm_ranking.index = firm_ranking.index + 1
firm_ranking = firm_ranking.rename_axis('Rank')
display(firm_ranking[['Contractor/ Firm', 'Ranking_Score']].head())

"""## Display the ranking

### Subtask:
Present the ranked list of firms in a clear format.

**Reasoning**:
Select the specified columns from the firm_ranking dataframe and display them to show the final ranking.
"""

# Display the ranking
display(firm_ranking[['Contractor/ Firm', 'Total_Balance_Quantity', 'Total_Rejection_Events', 'Average_Days_for_Completion', 'Ranking_Score']].head(3))

# Calculate delivery percentage per PO
df['Delivery Percentage'] = (df['Quantity Delivered'] / df['Quantity Demanded']) * 100

# Aggregate data by firm
firm_summary_viz = df.groupby('Contractor/ Firm').agg(
    Total_PO_Amount=('PO Amount (PKR)', 'sum'),
    Average_Delivery_Percentage=('Delivery Percentage', 'mean')
).reset_index()

# Create a combined plot
fig, ax1 = plt.subplots(figsize=(14, 7))

# Plotting Total PO Amount
sns.barplot(x='Contractor/ Firm', y='Total_PO_Amount', data=firm_summary_viz, ax=ax1, color='skyblue', label='Total PO Amount (PKR)')
ax1.set_ylabel('Total PO Amount (PKR)', color='skyblue')
ax1.tick_params(axis='y', labelcolor='skyblue')
ax1.set_xticklabels(firm_summary_viz['Contractor/ Firm'], rotation=90)

# Format y-axis labels for PO Amount in millions
import matplotlib.ticker as mticker
formatter = mticker.FuncFormatter(lambda x, _: '{:.1f}M'.format(x/1e6))
ax1.yaxis.set_major_formatter(formatter)

# Create a second y-axis for Average Delivery Percentage
ax2 = ax1.twinx()
sns.lineplot(x='Contractor/ Firm', y='Average_Delivery_Percentage', data=firm_summary_viz, ax=ax2, color='red', marker='o', label='Average Delivery Percentage')
ax2.set_ylabel('Average Delivery Percentage', color='red')
ax2.tick_params(axis='y', labelcolor='red')
ax2.set_ylim(0, 100) # Set y-axis limit for percentage

# Add legends
lines, labels = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax2.legend(lines + lines2, labels + labels2, loc='upper left')

plt.title('**SUMMARY - DELIVERY PROGRESS (FY 24/25)**', fontsize=14, fontweight='bold', ha='center', va='bottom')
plt.tight_layout()
plt.show()

"""## Summary:

### Data Analysis Key Findings

*   The performance of each firm was assessed based on three metrics: total balance quantity, total rejection events, and average days for order completion.
*   These metrics were normalized using Min-Max scaling to ensure equal weightage in the ranking.
*   A combined ranking score was calculated for each firm by summing the inverted normalized metrics (1 - normalized metric), so that lower values for the original metrics result in a higher ranking score.
*   The firms were ranked in descending order based on this combined score.

### Insights or Next Steps

*   The ranking provides a clear view of firm performance across key operational efficiency indicators.
*   Further investigation could delve into the reasons behind high rejection events or long completion times for lower-ranked firms to identify areas for improvement.

"""
